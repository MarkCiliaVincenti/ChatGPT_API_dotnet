// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenAI.Azure.GeneratedKiotaClient.Models {
    /// <summary>
    /// Information about the content filtering results.
    /// </summary>
    internal class ContentFilterResultsBase : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The custom_blocklists property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ContentFilterIdResult>? CustomBlocklists { get; set; }
#nullable restore
#else
        public List<ContentFilterIdResult> CustomBlocklists { get; set; }
#endif
        /// <summary>The error property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ErrorBase? Error { get; set; }
#nullable restore
#else
        public ErrorBase Error { get; set; }
#endif
        /// <summary>The hate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContentFilterSeverityResult? Hate { get; set; }
#nullable restore
#else
        public ContentFilterSeverityResult Hate { get; set; }
#endif
        /// <summary>The profanity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContentFilterDetectedResult? Profanity { get; set; }
#nullable restore
#else
        public ContentFilterDetectedResult Profanity { get; set; }
#endif
        /// <summary>The self_harm property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContentFilterSeverityResult? SelfHarm { get; set; }
#nullable restore
#else
        public ContentFilterSeverityResult SelfHarm { get; set; }
#endif
        /// <summary>The sexual property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContentFilterSeverityResult? Sexual { get; set; }
#nullable restore
#else
        public ContentFilterSeverityResult Sexual { get; set; }
#endif
        /// <summary>The violence property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContentFilterSeverityResult? Violence { get; set; }
#nullable restore
#else
        public ContentFilterSeverityResult Violence { get; set; }
#endif
        /// <summary>
        /// Instantiates a new contentFilterResultsBase and sets the default values.
        /// </summary>
        public ContentFilterResultsBase() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ContentFilterResultsBase CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ContentFilterResultsBase();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"custom_blocklists", n => { CustomBlocklists = n.GetCollectionOfObjectValues<ContentFilterIdResult>(ContentFilterIdResult.CreateFromDiscriminatorValue)?.ToList(); } },
                {"error", n => { Error = n.GetObjectValue<ErrorBase>(ErrorBase.CreateFromDiscriminatorValue); } },
                {"hate", n => { Hate = n.GetObjectValue<ContentFilterSeverityResult>(ContentFilterSeverityResult.CreateFromDiscriminatorValue); } },
                {"profanity", n => { Profanity = n.GetObjectValue<ContentFilterDetectedResult>(ContentFilterDetectedResult.CreateFromDiscriminatorValue); } },
                {"self_harm", n => { SelfHarm = n.GetObjectValue<ContentFilterSeverityResult>(ContentFilterSeverityResult.CreateFromDiscriminatorValue); } },
                {"sexual", n => { Sexual = n.GetObjectValue<ContentFilterSeverityResult>(ContentFilterSeverityResult.CreateFromDiscriminatorValue); } },
                {"violence", n => { Violence = n.GetObjectValue<ContentFilterSeverityResult>(ContentFilterSeverityResult.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ContentFilterIdResult>("custom_blocklists", CustomBlocklists);
            writer.WriteObjectValue<ErrorBase>("error", Error);
            writer.WriteObjectValue<ContentFilterSeverityResult>("hate", Hate);
            writer.WriteObjectValue<ContentFilterDetectedResult>("profanity", Profanity);
            writer.WriteObjectValue<ContentFilterSeverityResult>("self_harm", SelfHarm);
            writer.WriteObjectValue<ContentFilterSeverityResult>("sexual", Sexual);
            writer.WriteObjectValue<ContentFilterSeverityResult>("violence", Violence);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

