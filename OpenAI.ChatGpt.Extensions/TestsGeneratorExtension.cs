using OpenAI.ChatGpt.Models.ChatCompletion;

namespace OpenAI.ChatGpt.Extensions;

public static class TestsGeneratorExtension
{
    public static async Task<string> GenerateTestsForCodeInFolder(
        this OpenAiClient client, 
        string directoryPath,
        string language = "C#",
        string framework = "xunit",
        string model = ChatCompletionModels.Default,
        bool excludeAutoGeneratedFiles = true,
        CancellationToken cancellationToken = default)
    {
        if (client == null) throw new ArgumentNullException(nameof(client));
        if (directoryPath == null) throw new ArgumentNullException(nameof(directoryPath));
        if (language == null) throw new ArgumentNullException(nameof(language));
        if (framework == null) throw new ArgumentNullException(nameof(framework));
        if (model == null) throw new ArgumentNullException(nameof(model));
        if (!Directory.Exists(directoryPath))
        {
            throw new ArgumentException($"Directory {directoryPath} does not exist");
        }
        
        var files = SourceFiles.ReadFilesFromDirectory(directoryPath);
        files.Filter(excludeAutoGeneratedFiles, true, true);
        var result = await client.GenerateTestsForCode(files.GetCode(), language, framework, model, cancellationToken);
        return result;
    }

    public static async Task<string> GenerateTestsForCode(
        this OpenAiClient client,
        string code, 
        string language = "C#",
        string framework = "xunit",
        string model = ChatCompletionModels.Default,
        CancellationToken cancellationToken = default)
    {
        if (client == null) throw new ArgumentNullException(nameof(client));
        if (code == null) throw new ArgumentNullException(nameof(code));
        if (language == null) throw new ArgumentNullException(nameof(language));
        if (framework == null) throw new ArgumentNullException(nameof(framework));
        if (model == null) throw new ArgumentNullException(nameof(model));

        var dialog = Dialog.StartAsSystem(
            "You are a test generator assistant. The user send the whole program code " +
            $"and you generate tests on {language} using {framework}" +
            "with > 90% coverage for given files. In your answers write ONLY the code.")
            .ThenUser(code);
        
        var result = await client.GetChatCompletions(
            dialog,
            model: model,
            maxTokens: ChatCompletionModels.GetMaxTokensLimitForModel(model),
            cancellationToken: cancellationToken
        );
        
        return result;
    }

}