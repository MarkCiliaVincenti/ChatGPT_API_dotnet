using CSharpMinifier;
using OpenAI.Models.ChatCompletion;

namespace OpenAI.ChatGpt.Extensions;

public static class TestsGeneratorExtension
{
    public static async Task<string> GenerateTestsForCodeInFolder(
        this OpenAiClient client, 
        string directoryPath,
        string language = "C#",
        string framework = "xunit",
        string model = ChatCompletionModels.Default,
        bool excludeAutoGeneratedFiles = true,
        CancellationToken cancellationToken = default)
    {
        if (client == null) throw new ArgumentNullException(nameof(client));
        if (directoryPath == null) throw new ArgumentNullException(nameof(directoryPath));
        if (language == null) throw new ArgumentNullException(nameof(language));
        if (framework == null) throw new ArgumentNullException(nameof(framework));
        if (model == null) throw new ArgumentNullException(nameof(model));
        if (!Directory.Exists(directoryPath))
        {
            throw new ArgumentException($"Directory {directoryPath} does not exist");
        }
         
        var code = ReadCode(directoryPath, excludeAutoGeneratedFiles);
        var result = await client.GenerateTestsForCode(code, language, framework, model, cancellationToken);
        return result;
    }

    public static async Task<string> GenerateTestsForCode(
        this OpenAiClient client,
        string code, 
        string language = "C#",
        string framework = "xunit",
        string model = ChatCompletionModels.Default,
        CancellationToken cancellationToken = default)
    {
        if (client == null) throw new ArgumentNullException(nameof(client));
        if (code == null) throw new ArgumentNullException(nameof(code));
        if (language == null) throw new ArgumentNullException(nameof(language));
        if (framework == null) throw new ArgumentNullException(nameof(framework));
        if (model == null) throw new ArgumentNullException(nameof(model));

        var dialog = Dialog.StartAsSystem(
            "You are a test generator assistant. The user send the whole program code " +
            $"and you generate tests on {language} using {framework}" +
            "with > 90% coverage for given files. In your answers write ONLY the code.")
            .ThenUser(code);
        
        var result = await client.GetChatCompletions(
            dialog,
            model: model,
            maxTokens: ChatCompletionModels.GetMaxTokensLimitForModel(model),
            cancellationToken: cancellationToken
        );
        
        return result;
    }

    private static string ReadCode(
        string directoryPath,
        bool excludeAutoGeneratedFiles,
        bool removeConfigureAwait = true,
        bool minify = true)
    {
        var files = Directory.GetFiles(directoryPath, "*.cs", SearchOption.AllDirectories);
        var sources = files.Select(
            file => new SourceFile(file, File.ReadAllText(file)));
        if (excludeAutoGeneratedFiles)
        {
            sources = sources.Where(file  => !file.IsAutoGenerated());
        }

        if (minify)
        {
            // TODO join all usings to one, regex: ^\s*(using\s+[a-zA-Z0-9_.]+)\s*;\s*
            sources = sources.Select(file 
                => file with { Code = string.Join(' ', Minifier.Minify(file.Code)) });
        }

        if (removeConfigureAwait)
        {
            sources = sources.Select(file 
                => file with { Code = file.Code.Replace(".ConfigureAwait(false)", "") });
        }
        
        var codeWithFileNames = sources.Select(file =>
        {
            var header = $"// File: {Path.GetFileName(file.FileName)}";
            return header + Environment.NewLine + file.Code
                   + Environment.NewLine + Environment.NewLine;
        });
        var code = string.Join(Environment.NewLine, codeWithFileNames);
        return code;
    }

    private record SourceFile(string FileName, string Code)
    {
        public string Code { get; set; } = Code;

        public bool IsAutoGenerated()
        {
            return Code.Contains("<auto-generated") && !Code.Contains("<autogenerated");
        }
    }
}


// var allLines = files.SelectMany(File.ReadAllLines).ToList();
// var usings = allLines.Where(l => l.StartsWith("using")).Distinct();
// var code = allLines.Where(l => !l.StartsWith("using"));
// var codeWithUsings = usings.Append(Environment.NewLine).Concat(code);